# applicaton name displayed in page title and breadcrumtrail
app.name=DD Jenkins

# env.app.home    Home directory of the application where configuration
#             and logging files are stored. Ant will create this directory in the
#             "prepare" target.
#             NOTE: This directory shall not be directory of your Tomcat codebase e.g webapps.
#
# Don't do this at home kids!
env.app.home=/var/tmp/datadict

#  webapp.home Location where Tomcat application is installed.
#              If you would like to install application into ROOT application context this name must end with ROOT.
#Location also used for initializing required files for tests
webapp.home=/var/tmp/datadict/web

#test.webapp.home=target/app_home
# "test" database parameters
# This is optimised for Jenkins. Make a copy if you need to change this file
env.db.driver=com.mysql.cj.jdbc.Driver
env.db.jdbcurl=jdbc:mysql://${docker.host.address}:${mysql.port}/datadict?\
  createDatabaseIfNotExist=true&\
  server.initialize-user=true&\
  useUnicode=true&characterEncoding=UTF-8&\
  emptyStringsConvertToZero=false&\
  jdbcCompliantTruncation=false
env.db.jdbcurl.encoded=jdbc:mysql://${docker.host.address}:${mysql.port}/datadict?\
  createDatabaseIfNotExist=true&amp;\
  server.initialize-user=true&amp;\
  useUnicode=true&amp;characterEncoding=UTF-8&amp;\
  emptyStringsConvertToZero=false&amp;\
  jdbcCompliantTruncation=false
env.db.user=testuser
env.db.password=testpassword

# test database parameters (for running unit tests)
test.db.driver=com.mysql.cj.jdbc.Driver
test.db.jdbcurl=jdbc:mysql://${docker.host.address}:${mysql.port}/datadict?\
  createDatabaseIfNotExist=true&\
  server.initialize-user=true&\
  useUnicode=true&characterEncoding=UTF-8&\
  emptyStringsConvertToZero=false&\
  jdbcCompliantTruncation=false&\
  tinyInt1isBit=false
test.db.jdbcurl.encoded=jdbc:mysql://${docker.host.address}:${mysql.port}/datadict?\
  createDatabaseIfNotExist=true&amp;\
  server.initialize-user=true&amp;\
  useUnicode=true&amp;characterEncoding=UTF-8&amp;\
  emptyStringsConvertToZero=false&amp;\
  jdbcCompliantTruncation=false&amp;\
  tinyInt1isBit=false
test.db.user=testuser
test.db.password=testpassword

# Host and url of the DD website that will be created by this build
env.dd.url=http://dd.eionet.europa.eu
env.dd.host=dd.eionet.europa.eu

# uns properties
env.uns.xml.rpc.server.url=http://uns.eionet.europa.eu/rpcrouter
env.uns.channel.name=451146035889

env.uns.url=http://uns.eionet.europa.eu
uns.sendNotification.method=/v2/uns/event/legacy/sendNotification/
uns.makeSubscription.method=/v2/uns/event/legacy/makeSubscription/
env.uns.rest.username=
env.uns.rest.password=

# TEST uns properties
test.uns.xml.rpc.server.url=http://testuns.eionet.europa.eu/rpcrouter
test.uns.channel.name=987654321


ldap.url=ldap://ldap.eionet.europa.eu:389/

# The principal for logging onto LDAP (see javax.naming.Context.SECURITY_PRINCIPAL).
# The authentication mechanism will be "simple" (see javax.naming.Context.SECURITY_AUTHENTICATION).
ldap.principal=cn=Accounts browser,o=EIONET,l=Europe

# The password for the principal identified by ldap.principal. See see javax.naming.Context.SECURITY_CREDENTIALS.
ldap.password=

# MD5 hash from master password for simulating different users in test & development environments. In operational DD, leave it blank.
env.dd.master.pwd.hash=af97ad15208f08bcaec072779ade8ec5

# SMTP configuration
env.smtp.host=
env.smtp.username=
env.smtp.password=
env.smtp.tls=true

# Site code notification recipients, where [iso_country_code] will be replaced with by country ISO code.
env.siteCode.allocate.notification.to=eionet-etc-bd-cdda@roles.eea.eionet.europa.eu, \
  eionet-nfp-[mc_or_cc]-[iso_country_code]@roles.eea.eionet.europa.eu, \
  eionet-nrc-biodivdata-[mc_or_cc]-[iso_country_code]@roles.eea.eionet.europa.eu
env.siteCode.reserve.notification.to=eionet-etc-bd-cdda@roles.eea.eionet.europa.eu
env.siteCode.notification.from=cr@eionet.europa.eu
#use this e-mail on test env. If test e-mail is filled, then the notifications are only sent to this e-mail.
env.siteCode.test.notification.to=

# Full path to Data Dictionary log file
dd.log.file=datadict.log

# URL to ask Content Registry to reharvest DD rdf sources. CR does not allow to ping from any address
# see http://taskman.eionet.europa.eu/projects/reportnet/wiki/ContentRegistryPing
# Add %s into request parameter value as a replacement to harvest URL
env.cr.reharvest.request.url=http://cr.eionet.europa.eu/ping?uri=%s

# Maximum amount of site codes that can be allocated. Default is 500.
env.siteCode.allocate.maxAmount=500

# Maximum amount of site codes that can be allocated without name. Default is 100.
env.siteCode.allocate.maxAmountWithoutName=100

# Maximum amount of site codes that can be allocated by ETC/EEA users. Default is 1000.
env.siteCode.allocate.maxAmountForEtcEeaUsers=1000

# Maximum amount of site codes that can be reserved. Default is 10000.
env.siteCode.reserve.maxAmount=10000

# Site code LDAP parent roles
env.siteCode.parent.roles=eionet-nfp-cc, eionet-nfp-mc, eionet-nrc-biodivdata-cc, eionet-nrc-biodivdata-mc, reportnet-awp-cdda-reporter

# Working language for DD. Use values compliant with IETF BCP 47, "Tags for Identifying Languages"!
env.dd.working.language=en

# number of  recently released items displayed on DD front page FOR UNIT TESTS
env.dd.recently.released.vocabularies=4
env.dd.recently.released.schemas=4
env.dd.recently.released.datasets=4

#JWT web token API related fields
#Secret key for JWT HS512 encoding
env.dd.vocabulary.api.key=oSx01e+/ohnemTVHs2r5QqT/m8/Q0f41nVJFXHORoOcLXSVsyE37NJO5/BVM+fCXdaC9F8d0X9obFscv0lGaK6/yS5vrNoqIK+FXViDWTcYlD6sOUDdfR4lUpJaKD0lrnMtmP42X49E+qnQrQD9DY/au9peSkndWquta37JVUleg1501ShYJF4X0adxjYhHssA/S9QRHTl1eUb134abOKMJ/7Dj1V6/++4rg3A==
#Expiration check in minutes (used for signing)
env.dd.vocabulary.api.exp=71
#Audience for JWT
env.dd.vocabulary.api.audience=DataDictionary
#A timeout for Json Web Token, in minutes, default 10 minutes (used to check if a JWT deprecated or not, to prevent re-use of same token)
env.dd.vocabulary.api.jwt.timeout=10
#Signing algorithm for JWS, supported values are HS256, HS384, HS512, default HS512
env.dd.vocabulary.api.jwt.algorithm=HS512

env.dd.countryCodes.excluded=DZ,EG,IL,JO,LB,MA,PS,TN

