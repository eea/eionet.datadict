
#Default build properties for build.xml

# applicaton name displayed in page title and breadcrumtrail
app.displayName=Data Dictionary

# app.home    Home directory of the application where configuration
#             and logging files are stored. Ant will create this directory in the
#             "prepare" target.
#             NOTE: This directory shall not be directory of your Tomcat codebase e.g webapps.
#
#app.home=/home/exorx-alk/EEAProjects/webappshome/datadict
app.home=/opt/datadict

#  webapp.home Location where Tomcat application is installed.
#              If you would like to install application into ROOT application context this name must end with ROOT.
#webapp.home=/home/exorx-alk/apache-tomcat-6.0.45/webapps/datadict

webapp.home=/usr/local/tomcat/webapps/ROOT
# "live" database parameters (as opposed to test database parameters, see below)
# Use GRANT CREATE, DROP, SELECT, INSERT, UPDATE, DELETE, INDEX, ALTER ON `DataDict`.* TO 'username'@'localhost'
#db.host=localhost
#db.database=DataDict
db.driver=com.mysql.jdbc.Driver
db.jdbcurl=jdbc:mysql://mysql:3306/DataDict\
    ?autoReconnect=true\
    &useUnicode=true\
    &characterEncoding=UTF-8\
    &emptyStringsConvertToZero=false\
    &jdbcCompliantTruncation=false
db.jdbcurl.encoded=jdbc:mysql://mysql:3306/DataDict\
    ?autoReconnect=true\
    &amp;useUnicode=true\
    &amp;characterEncoding=UTF-8\
    &amp;emptyStringsConvertToZero=false\
    &amp;jdbcCompliantTruncation=false
db.user=root
db.password=aliki

# test database parameters (for running unit tests)
test.db.driver=com.mysql.jdbc.Driver
test.db.jdbcurl=jdbc:mysql:mxj://localhost:3776/DataDict\
    ?createDatabaseIfNotExist=true\
    &server.basedir=/tmp/datadict-mxj\
    &server.initialize-user=true\
    &useUnicode=true\
    &characterEncoding=UTF-8\
    &emptyStringsConvertToZero=false\
    &jdbcCompliantTruncation=false
test.db.jdbcurl.encoded=jdbc:mysql:mxj://localhost:3776/DataDictTest\
    ?createDatabaseIfNotExist=true\
    &amp;server.basedir=/tmp/datadict-mxj\
    &amp;server.initialize-user=true\
    &amp;useUnicode=true\
    &amp;characterEncoding=UTF-8\
    &amp;emptyStringsConvertToZero=false\
    &amp;jdbcCompliantTruncation=false
test.db.user=dduser
test.db.password=asui98cxxo

# Host and url of the DD website that will be created by this build
 dd.url=http://178.239.183.139:8888
#dd.url=http://localhost:8080/datadict
 dd.host=178.239.183.139:8888
#dd.host=localhost:8080
# Full path to Data Dictionary log file
dd.log.file=datadict.log

xmlConv.url=http://converters.eionet.europa.eu

# SMTP configuration
smtp.host=mailhost.eea.eu
smtp.username=mail@eea.europa.eu
smtp.password=pwdhere
smtp.tls=false

# Site code notification recipients, where [iso_country_code] will be replaced with by country ISO code.
siteCode.allocate.notification.to=eionet-etc-bd-cdda@roles.eea.eionet.europa.eu, \
  eionet-nfp-[mc_or_cc]-[iso_country_code]@roles.eea.eionet.europa.eu, \
  eionet-nrc-biodivdata-[mc_or_cc]-[iso_country_code]@roles.eea.eionet.europa.eu
siteCode.reserve.notification.to=eionet-etc-bd-cdda@roles.eea.eionet.europa.eu
siteCode.notification.from=cr@eionet.europa.eu
#use this e-mail on test env. If test e-mail is filled, then the notifications are only sent to this e-mail.
siteCode.test.notification.to=

# URL to ask Content Registry to reharvest DD rdf sources. CR does not allow to ping from any address
# see http://taskman.eionet.europa.eu/projects/reportnet/wiki/ContentRegistryPing
# Add %s into request parameter value as a replacement to harvest URL
cr.reharvest.request.url=http://cr.eionet.europa.eu/ping?uri=%s

# Maximum amount of site codes that can be allocated. Default is 500.
siteCode.allocate.maxAmount=500

# Maximum amount of site codes that can be allocated without name. Default is 100.
siteCode.allocate.maxAmountWithoutName=100

# Maximum amount of site codes that can be allocated by ETC/EEA users. Default is 1000.
siteCode.allocate.maxAmountForEtcEeaUsers=1000

# Maximum amount of site codes that can be reserved. Default is 10000.
siteCode.reserve.maxAmount=10000

# uns properties
uns.xml.rpc.server.url=http://uns.eionet.europa.eu/rpcrouter
uns.channel.name=123456789

# TEST uns properties
test.uns.xml.rpc.server.url=http://test.tripledev.ee/uns/rpcrouter
test.uns.channel.name=987654321

# Language codes and labels for Data Dictionary
dd.languages.labels=Bulgarian,Czech,Danish,German, \
    Greek,English,Spanish,Estonian, \
    Finnish,French,Irish,Hungarian, \
    Italian,Lithuanian,Latvian,Maltese, \
    Dutch,Norwegian,Polish,Portuguese, \
    Romanian,Slovak,Slovenian,Swedish
dd.languages.codes=bg,cs,da,de,el,en,es,et,fi,fr,ga,hu, \
    it,lt,lv,mt,nl,no,pl,pt,ro,sk,sl,sv

# Working language for DD. Use values compliant with IETF BCP 47, "Tags for Identifying Languages"!
dd.working.language=en

#examples for interval: 120s, 2h
#example for cron: 0 20/0 * 1/1 * ? *

#can be either a cron expression or time interval:
#examples for interval: 120s, 2h
#example for cron: 0 20/0 * 1/1 * ? *
#One can use http://www.cronmaker.com/ to create cron format.
#below is the value for every night at 01:25 (am). 
#0 = Seconds, 25 = Minutes, 1 = Hour, 1/1 = once / in one day
vocabularyReferenceMatch.job.schedule= 	0 25 1 1/1 * ? *
vocabularyReferenceMatch.job.data=match:References

#JWT web token API related fields
#Secret key for JWT HS512 encoding
dd.vocabulary.api.key=ddTestAp1KeyF4VocUpload_87923!@Q
#Expiration check in minutes (used for signing)
dd.vocabulary.api.exp=71
#Audience for JWT
dd.vocabulary.api.audience=DataDictionary
#A timeout for Json Web Token, in minutes, default 10 minutes (used to check if a JWT deprecated or not, to prevent re-use of same token)
dd.vocabulary.api.jwt.timeout=10
#Signing algorithm for JWS, supported values are HS256, HS384, HS512, default HS512
dd.vocabulary.api.jwt.algorithm=HS512




