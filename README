
*************************************************
This is the EIONET Data Dictionary (DD) software.
*************************************************
The Data Dictionary is used to support the delivery of environmental data by countries to Reportnet. 
The contents in the data dictionary are used to generate pdfs of the technical specifications for dataflows as well 
as Excel templates. 
The Data Dictionary also introduces the possibility of simple automated validation of deliveries 
by countries and facilitates the development of data submission interfaces.

Data Dictionary holds definitions of datasets, tables and data elements. Each of these three levels is defined by 
a set of attributes, the core set of which corresponds to ISO 11179 standard for describing data elements. 
The whole attribute set is flexible and attributes can be added / removed from/to the system.

For doing a quick-start installation, read the following instructions. They
give some hints on how to quickly get DD code from git, and how to set
it up as a Tomcat web application.


****************************************************************************
1. Download and install Java, Tomcat and Maven.
****************************************************************************

DD runs on Java platform, and has been tested and run on Tomcat Java Servlet Container.
DD source code is built with Maven.

Please download all of these software and install them according to the instructions
found at their websites.

The necessary versions are as follows:

Java 1.5 or higher
Maven 2.0.4 or higher
Tomcat 5.5 or higher


****************************************************************************
2. Download DD source code
****************************************************************************

a)	Create build directory for source code

shell>cd /var/local/build
shell>git clone https://github.com/eea/eionet.datadict.git

	NB! The resulting /var/local/build/eionet.datadict directory will be denoted 
	below as $CHECKOUT_HOME

b)	Create local.properties file by making a copy of default.properties.

shell>cd $CHECKOUT_HOME
shell>cp default.properties local.properties

****************************************************************************
3. Adjust properties
****************************************************************************
	In the freshly created local.properties file, change property values as
	appropriate for your environment. You will find meanings of every property
	from inside the file as comments.
   
****************************************************************************
4. Create DD database and database user in MySql matching the db configuration values in local.properties
****************************************************************************

shell>mysql -u root -p
mysql>create database DataDict;
mysql>CREATE USER 'dduser'@'localhost' IDENTIFIED BY 'password-here';
mysql>GRANT ALL PRIVILEGES ON DataDict.* TO 'dduser'@'localhost';


****************************************************************************
5. Unit testing
****************************************************************************

	The unit test mechanism will install its own embedded
	database and create the tables when you execute them. Note that the
	MySQL database will keep running afterwards. You can run individual
	tests with: -Dtest=DatasetImportHandlerTest

shell>cd $CHECKOUT_HOME
shell>mvn -Denv=unittest -Dmaven.test.skip=false test

*********************************************************************
6. Custom headers and footers configuration (OPTIONAL)
*********************************************************************
	Revise $CHECKOUT_HOME/custom/*.txt files for modifying
	the content of headers and footers in DD web pages texts and links.
	You will find guidelines from inside $CHECKOUT_HOME/custom/README.txt.
	

	
*********************************************************************
7. Build the DD web application 
*********************************************************************
	The application install package is built with maven

shell>cd $CHECKOUT_HOME
shell>mvn -Dmaven.test.skip=true clean install


********************************************************************
8. Import initial Seed data
********************************************************************
	a)	Create  initial database structure 

shell>mvn liquibase:update

	b)  import DD seed data
shell>mvn -Dliquibase.changeLogFile=sql/dd-seeddata.xml liquibase:update



***********************************************************************
9. Register Eionet's GlobalSign CA certificates in your JVM. (OPTIONAL)
***********************************************************************

	This step is required only if you configured DD to use EEA's  
	Central Authentication Service (CAS) in step 3.
	In other words: if you pointed edu.yale.its.tp.cas.client.filter.loginUrl 
	and edu.yale.its.tp.cas.client.filter.validateUrl to EEA's CAS server. 
	In such a case you need to register Eionet's GlobalSign CA certificates 
	in the JVM that runs the Tomcat where you deploy DD.

The steps are as follows (note that the expected password for the keystore is "changeit", but don't change it):

a) Go to [http://www.eionet.europa.eu/certificates] and download the certificates called
GlobalSign-Root-CA.crt and GlobalSign-Domain-Validation-CA.crt to a temporary directory.

b) Check that the GlobalSign-Root-CA.crt certificate is not already in the keystore:
shell> openssl x509 -fingerprint -md5 -noout -in GlobalSign-Root-CA.crt

Compare the fingerprint to what is already in the keystore:
shell> keytool -list -keystore $JAVA_HOME/jre/lib/security/cacerts

c) Import the certificate from the .crt file into your JVM's default keystore of  trusted certificates.
Example:
shell> keytool -import -file GlobalSign-Root-CA.crt -alias globalsignca28 -keystore $JAVA_HOME/jre/lib/security/cacerts
This certificate will be added under alias "globalsignca28".

d) Do steps b) and c) for GlobalSign-Domain-Validation-CA.crt as well.
Store it under the alias 'globalsigndomain14'.


***********************************************************************
10. Place the resulting $CHECKOUT_HOME/target/datadict.war into Tomcat's webapps directory, and start Tomcat.
***********************************************************************


**************************************************************************
Additional applications for modifying DD access permissions and help texts
**************************************************************************

Additional web applications are available for modifying user privileges and help texts in DD:
AclAdmin tool: https://svn.eionet.europa.eu/repositories/Reportnet/acladmin/trunk
HelpAdmin tool: https://svn.eionet.europa.eu/repositories/Reportnet/helpadmin/trunk

Installing these applications is done by similar steps:

1. Checkout from SVN
2. Create local.properties from default.properties
3. Modify environment specific properties in local.properties file
4. call "mvn install"
5. Rename acladmin.properties.dist/helpadmin.properties.dist to acladmin.properties/helpadmin.properties in ROOT/WEB-INF/classes folder and revise the content of the properties files
6. Rename *.acl.dist files to *.acl files in acladmin_contents/acls folder (only in AclAdminTool) and revise the contents of acladmin.group file
	More detailed information about ACL's is available at: http://taskman.eionet.europa.eu/projects/reportnet/wiki/AccessControlLists

7. Copy the created war files to tomcat webapps folder and start tomcat
Please find more detailed information in documentation of these applications

REFERENCES for unit testing:
 - http://realsolve.co.uk/site/tech/dbunit-quickstart.php
 - http://www.onjava.com/pub/a/onjava/2004/01/21/dbunit.html
 - http://www.dbunit.org/

