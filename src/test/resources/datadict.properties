# JDBC driver settings
#######################
db.drv=${test.db.driver}
db.url=${test.db.jdbcurl}
db.usr=${test.db.user}
db.psw=${test.db.password}

# properties of incoming services like ROD
###########################################
inserv.webrod.url=http://rod.eionet.europa.eu/rpcrouter
inserv.webrod.name=WebRODService
inserv.webrod.ra-url-pattern=http://rod.eionet.europa.eu/obligations/<RA_ID>

# properties of outgoing services like for ROD
##############################################
outserv.elm-details-url=${dd.url}/dataelements/<ELM_ID>
outserv.rod-obligation-url=http://rod.eionet.eu.int/obligations/
outserv.pred-identifier=http://purl.org/dc/elements/1.1/identifier
outserv.pred-title=http://purl.org/dc/elements/1.1/title

# properties for MS Excel generation
######################################
xls.schema-url=${dd.url}/GetSchema?id=
xls.schema-url-sheet=DO_NOT_DELETE_THIS_SHEET

# properties for MS Access generation
#####################################
mdb.executable=${app.home}/makemdb.sh
mdb.vmd-schema-url=${dd.url}/GetSchema?id=

# various properties
#####################
harvester.log=${app.home}/harvester.log
pdf.uni-font=${webapp.home}/WEB-INF/classes/arial.ttf
xforms.templ.url=http://cdr.eionet.europa.eu/webq/GetXFormTemplate
jsp.url-prefix=${dd.url}/
dd.rdf-schema.url=${dd.url}/schema.rdf#
predicate.rdf-type=http://www.w3.org/1999/02/22-rdf-syntax-ns#type
predicate.rdf-label=http://www.w3.org/2000/01/rdf-schema#label
visuals.path=${webapp.home}/visuals
opendoc.ods.path=${app.home}/opendoc/ods
general.temp-file-path=${app.home}/tmp
general.doc-path=${app.home}/tmp
dd.url=${dd.url}

# UNS-related properties
#########################

# XML-RPC server URL for UNS subscription
uns.xml.rpc.server.url=http://uns.eionet.europa.eu/rpcrouter

#Channel name for UNS subscription method
uns.channel.name=451146035889

# UNS event namespace
uns.events-namespace=${dd.url}/events/

# Event type predicate for UNS subscription method
uns.eventtype.predicate=${dd.url}/schema.rdf#event_type

# Dataset predicate for UNS subscription method
uns.dataset.predicate=${dd.url}/schema.rdf#dataset

# Table predicate for UNS subscription method
uns.table.predicate=${dd.url}/schema.rdf#table

# Common element predicate for UNS subscription method
uns.commonelem.predicate=${dd.url}/schema.rdf#commonelem

# Definition URL predicate for UNS subscription method
uns.definition-url.predicate=${dd.url}/schema.rdf#definition_url

# User predicate for UNS subscription method
uns.user.predicate=${dd.url}/schema.rdf#user

# Definition status predicate for UNS subscription method
uns.definition-status.predicate=${dd.url}/schema.rdf#definition_status

# UNS subscriptions URL
uns.subscriptions.url=${dd.url}/subsc/edit?sid=

# username for UNS subscriptions
uns.username=ddnotif

# password for UNS subscriptions
uns.password=nucunexe

#UNS xmlrpc function that is called for making subscription
uns.make.subsription.function=UNSService.makeSubscription

#UNS xmlrpc function that is called for sending notifications
uns.send.notification.function=UNSService.sendNotification

# The help screen name for the DD documentation
documentation.screen-name=documentation

# Attributes irrelevant for certain data types
irrelevantAttrs.float=MinSize,MaxSize,DecimalPrecision
irrelevantAttrs.double=MinSize,MaxSize,DecimalPrecision
irrelevantAttrs.integer=MinSize,DecimalPrecision
irrelevantAttrs.decimal=MinSize
irrelevantAttrs.string=MinInclusiveValue,MaxInclusiveValue,MinExclusiveValue,MaxExclusiveValue,DecimalPrecision
irrelevantAttrs.date=MinInclusiveValue,MaxInclusiveValue,MinExclusiveValue,MaxExclusiveValue,DecimalPrecision,MinSize,MaxSize
irrelevantAttrs.boolean=MinInclusiveValue,MaxInclusiveValue,MinExclusiveValue,MaxExclusiveValue,DecimalPrecision,MinSize,MaxSize

# The base URI that uses in rdf:about and rdf:resource values in generated RDF files.
# Argument {0} stands for table id (the numeric one).
rdf.tables.baseUri=${dd.url}/tables/{0,number,#}/rdf
rdf.dataelements.baseUri=${dd.url}/dataelements/{0,number,#}/rdf

# URI for the general RDF schema
dd.generalSchemaUri=${dd.url}/schema.rdf#

# Local name for the multivalue delimiter attribute name
dd.multiValueDelimAttrName=multiValueDelim

# Full path to the MSAccess template file for generating MSAccess representations for datasets
datasetMSAccessTemplate=${app.home}/msaccess/DD_generic_template.mdb

# properties for CR CAS filter config
edu.yale.its.tp.cas.client.filter.loginUrl=https://sso.eionet.europa.eu/login
edu.yale.its.tp.cas.client.filter.validateUrl=https://sso.eionet.europa.eu/serviceValidate
edu.yale.its.tp.cas.client.filter.serverName=${dd.host}
edu.yale.its.tp.cas.client.filter.wrapRequest=true

# Full path to the root directory of DD's file store.
filestore.path=${app.home}/filestore

# Full path to the root directory of DD's schema repository.
schemaRepo.location=${app.home}/schemas

# URL to the Eionet converters website. It is used for bulding links from Data Dictionary to Eionet converters.
xmlConv.url=http://converters.eionet.europa.eu

# MD5 hash from master password for simulating different users in test & development environments. In operational DD, leave it blank.
dd.master.pwd.hash=${dd.master.pwd.hash}

# SMTP configuration
smtp.host=test
smtp.username=test
smtp.password=test
smtp.tls=test

# Site code notification recipients
siteCode.allocate.notification.to=${siteCode.allocate.notification.to}
siteCode.reserve.notification.to=${siteCode.reserve.notification.to}
siteCode.notification.from=${siteCode.notification.from}
#use this e-mail on test env. If test e-mail is filled, then the notifications are only sent to this e-mail.
siteCode.test.notification.to=${siteCode.test.notification.to}

# CR's re-harevst URL.
cr.reharvest.request.url=${cr.reharvest.request.url}

# A friendly URI template for reprsenting DD namespaces. Placeholder replaced at runtime by a particular namespace identifier.
dd.namespaces.friendlyUriTemplate=${dd.url}/namespace/{0}