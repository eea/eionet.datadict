# JDBC driver settings
#######################
db.drv=${env.db.driver}
db.url=${env.db.jdbcurl}
db.usr=${env.db.user}
db.psw=${env.db.password}


# properties of outgoing services like for ROD
##############################################
outserv.elm-details-url=${dd.url}/dataelements/<ELM_ID>
outserv.rod-obligation-url=http://rod.eionet.europa.eu/obligations/
outserv.pred-identifier=http://purl.org/dc/elements/1.1/identifier
outserv.pred-title=http://purl.org/dc/elements/1.1/title

# properties for MS Excel generation
######################################
xls.schema-url=${dd.url}/GetSchema?id=
xls.schema-url-sheet=DO_NOT_DELETE_THIS_SHEET

# properties for MS Access generation
#####################################
mdb.vmd-schema-url=${dd.url}/GetSchema?id=

# various properties
#####################
app.home=${env.app.home}
harvester.log=${app.home}/harvester.log
pdf.uni-font=${webapp.home}/WEB-INF/classes/arial.ttf
xforms.templ.url=http://cdr.eionet.europa.eu/webq/GetXFormTemplate
jsp.url-prefix=${dd.url}/
dd.rdf-schema.url=${dd.url}/schema.rdf#
predicate.rdf-type=http://www.w3.org/1999/02/22-rdf-syntax-ns#type
predicate.rdf-label=http://www.w3.org/2000/01/rdf-schema#label
visuals.path=${webapp.home}/visuals
opendoc.ods.path=${app.home}/opendoc/ods
general.temp-file-path=${app.home}/tmp
general.doc-path=${app.home}/tmp
dd.url=${env.dd.url}
dd.host=${env.dd.host}

# UNS-related properties
#########################

# XML-RPC server URL for UNS subscription
uns.xml.rpc.server.url=${env.uns.xml.rpc.server.url}

#Channel name for UNS subscription method
uns.channel.name=${env.uns.channel.name}

# UNS event namespace
uns.events-namespace=${dd.url}/events/

# Event type predicate for UNS subscription method
uns.eventtype.predicate=${dd.url}/schema.rdf#event_type

# Dataset predicate for UNS subscription method
uns.dataset.predicate=${dd.url}/schema.rdf#dataset

# Table predicate for UNS subscription method
uns.table.predicate=${dd.url}/schema.rdf#table

# Common element predicate for UNS subscription method
uns.commonelem.predicate=${dd.url}/schema.rdf#commonelem

# Definition URL predicate for UNS subscription method
uns.definition-url.predicate=${dd.url}/schema.rdf#definition_url

# User predicate for UNS subscription method
uns.user.predicate=${dd.url}/schema.rdf#user

# Definition status predicate for UNS subscription method
uns.definition-status.predicate=${dd.url}/schema.rdf#definition_status

# UNS subscriptions URL
uns.subscriptions.url=${dd.url}/subsc/edit?sid=

# username for UNS subscriptions
uns.username=ddnotif

# password for UNS subscriptions
uns.password=nucunexe

# UNS xmlrpc function that is called for making subscription
uns.make.subsription.function=UNSService.makeSubscription

# UNS xmlrpc function that is called for sending notifications
uns.send.notification.function=UNSService.sendNotification

# If present and "true", this flag disables UNS event sending. In all other cases, sending is enabled.
# On Windows platform sending is disabled by default, unless this property is present and explicitly set to "false".
uns.isDisabled=${env.uns.isDisabled}

# The help screen name for the DD documentation
documentation.screen-name=documentation

# Attributes irrelevant for certain data and element types
irrelevantAttrs.float=MinSize,MaxSize,DecimalPrecision
irrelevantAttrs.double=MinSize,MaxSize,DecimalPrecision
irrelevantAttrs.integer=MinSize,DecimalPrecision
irrelevantAttrs.decimal=MinSize
irrelevantAttrs.string=MinInclusiveValue,MaxInclusiveValue,MinExclusiveValue,MaxExclusiveValue,DecimalPrecision
irrelevantAttrs.date=MinInclusiveValue,MaxInclusiveValue,MinExclusiveValue,MaxExclusiveValue,DecimalPrecision,MinSize,MaxSize
irrelevantAttrs.boolean=MinInclusiveValue,MaxInclusiveValue,MinExclusiveValue,MaxExclusiveValue,DecimalPrecision,MinSize,MaxSize
irrelevantAttrs.reference=MinInclusiveValue,MaxInclusiveValue,MinExclusiveValue,MaxExclusiveValue,DecimalPrecision,MinSize,MaxSize,Unit,languageUsed
irrelevantAttrs.localref=MinInclusiveValue,MaxInclusiveValue,MinExclusiveValue,MaxExclusiveValue,DecimalPrecision,MinSize,MaxSize,Unit,languageUsed
irrelevantAttrs.CH1=MinSize,MaxSize
irrelevantAttrs.CH3=MinSize,MaxSize,languageUsed
irrelevantAttrs.point=MinInclusiveValue,MaxInclusiveValue,MinExclusiveValue,MaxExclusiveValue,DecimalPrecision,MinSize,MaxSize,Unit
irrelevantAttrs.linestring=MinInclusiveValue,MaxInclusiveValue,MinExclusiveValue,MaxExclusiveValue,DecimalPrecision,MinSize,MaxSize,Unit
irrelevantAttrs.polygon=MinInclusiveValue,MaxInclusiveValue,MinExclusiveValue,MaxExclusiveValue,DecimalPrecision,MinSize,MaxSize,Unit

# The base URI that uses in rdf:about and rdf:resource values in generated RDF files.
# Argument {0} stands for table id (the numeric one).
rdf.tables.baseUri=${dd.url}/tables/{0,number,#}/rdf
rdf.dataelements.baseUri=${dd.url}/dataelements/{0,number,#}/rdf

# A friendly URI template for reprsenting DD namespaces. Placeholder replaced at runtime by a particular namespace identifier.
dd.namespaces.friendlyUriTemplate=${dd.url}/namespace/{0}

# URI for the general RDF schema
dd.generalSchemaUri=${dd.url}/schema.rdf#

# Local name for the multivalue delimiter attribute name
dd.multiValueDelimAttrName=multiValueDelim

# Full path to the MSAccess template file for generating MSAccess representations for datasets
datasetMSAccessTemplate=${app.home}/msaccess/DD_generic_template.mdb

# properties for CR CAS filter config
edu.yale.its.tp.cas.client.filter.loginUrl=https://sso.eionet.europa.eu/login
edu.yale.its.tp.cas.client.filter.validateUrl=https://sso.eionet.europa.eu/serviceValidate
edu.yale.its.tp.cas.client.filter.serverName=${dd.host}
edu.yale.its.tp.cas.client.filter.wrapRequest=true

# Full path to the root directory of DD's file store.
filestore.path=${app.home}/filestore

# Full path to the root directory of DD's schema repository.
schemaRepo.location=${app.home}/schemas

# URL to the Eionet converters website. It is used for bulding links from Data Dictionary to Eionet converters.
xmlConv.url=${env.xmlConv.url}

# MD5 hash from master password for simulating different users in test & development environments. In operational DD, leave it blank.
dd.master.pwd.hash=${env.dd.master.pwd.hash}

# SMTP configuration
smtp.host=${env.smtp.host}
smtp.username=${env.smtp.username}
smtp.password=${env.smtp.password}
smtp.tls=${env.smtp.tls}
smtp.port=${env.smtp.port}

notification.email.from=${env.notification.email.from}

# Site code notification recipients
siteCode.allocate.notification.to=${env.siteCode.allocate.notification.to}
siteCode.reserve.notification.to=${env.siteCode.reserve.notification.to}
siteCode.notification.from=${env.siteCode.notification.from}
#use this e-mail on test env. If test e-mail is filled, then the notifications are only sent to this e-mail.
siteCode.test.notification.to=${env.siteCode.test.notification.to}

cr.reharvest.request.url=${env.cr.reharvest.request.url}

# Maximum amount of site codes that can be allocated. Default is 500.
siteCode.allocate.maxAmount=${env.siteCode.allocate.maxAmount}

# Maximum amount of site codes that can be allocated without name. Default is 100.
siteCode.allocate.maxAmountWithoutName=${env.siteCode.allocate.maxAmountWithoutName}

# Maximum amount of site codes that can be allocated by ETC/EEA users. Default is 1000.
siteCode.allocate.maxAmountForEtcEeaUsers=${env.siteCode.allocate.maxAmountForEtcEeaUsers}

# Maximum amount of site codes that can be reserved. Default is 10000.
siteCode.reserve.maxAmount=${env.siteCode.reserve.maxAmount}

# Site code LDAP parent roles
siteCode.parent.roles=${env.siteCode.parent.roles}

#schedule can be either a cron expression or time interval:
#examples for interval: 120s, 2h
#example for cron: 0 20/0 * 1/1 * ? *
#vocabularyReferenceMatch.job.schedule=${vocabularyReferenceMatch.job.schedule}
#vocabularyReferenceMatch.job.data=${vocabularyReferenceMatch.job.data}

# Working language for DD. Use values compliant with IETF BCP 47, "Tags for Identifying Languages"!
# Working language for DD
dd.working.language=${env.dd.working.language}

# recently released items numbers to be displayed
dd.recently.released.vocabularies=${env.dd.recently.released.vocabularies}
dd.recently.released.schemas=${env.dd.recently.released.schemas}
dd.recently.released.datasets=${env.dd.recently.released.datasets}

# If false, the Central Authentication Service (CAS) is not used, and the properties that
# start with "edu.yale.its.tp.cas.client.filter." are ignored. In such a case, DD uses
# other authentication means provided by the eionetdir.properties and local users file
# defined in uit.properties. By default the value of this property is true.
useCentralAuthenticationService=${env.useCentralAuthenticationService}

#JWT web token API related fields
#Secret key for JWT HS512 encoding
dd.vocabulary.api.key=${env.dd.vocabulary.api.key}
#Expiration check in minutes (used for signing)
dd.vocabulary.api.exp=${env.dd.vocabulary.api.exp}
#Audience for JWT
dd.vocabulary.api.audience=${env.dd.vocabulary.api.audience}
#A timeout for Json Web Token, in minutes, default 10 minutes (used to check if a JWT deprecated or not, to prevent re-use of same token)
dd.vocabulary.api.jwt.timeout=${env.dd.vocabulary.api.jwt.timeout}
#Signing algorithm for JWS, supported values are HS256, HS384, HS512, default HS512
dd.vocabulary.api.jwt.algorithm=${env.dd.vocabulary.api.jwt.algorithm}


# Name of the folder of DD's own vocabularies.
dd.ownVocabulariesFolderName=datadictionary

# Identifier of DD's own status vocabulary (that lives inside dd.ownVocabulariesFolderName).
dd.ownStatusVocabularyIdentifier=status
