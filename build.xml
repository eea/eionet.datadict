<?xml version="1.0" encoding="UTF-8"?>
<!-- ================================================== -->
<!-- BUILDFILE FOR DATA DICTIONARY

Ant reads the following arguments from build.properties file.
	webapp.home - directory where the application will be installed eg.  /tomcat/webapps
	servletapi.jar - servletapi.jar file location eg. /tomcat/common/lib/srvletapi.jar

If build.properties doesn't exist yet, then make a copy from
default.properties and rename it to build.properties. Modify properties,
if needed.


The main targets are:

compile
   compiles java classes into classes.dir.

buildjar
   builds datadict.jar into WEB-INF/lib directory. removes also compiled java classes from classes directory.

install
    creates the correct deployment directory structure in the target webapp.home and
    copies all web (jsp, xsl, xml,images, css and js), configuration (web.xml)
    related data there, java libraries and builds jar file.

clean
    this target removes all compiled java classes from classes.dir,
    but does not touch the rest (jsp, html, xml, stylesheets etc.)


default is install
-->
<!-- use JAR instead of classes because it makes it easier to debug errors -->



<project name="datadict" default="install" basedir=".">

	<!-- set global properties for this build -->
	<!-- reads default parametrs from build.properties file -->

	<target name="init">

		<condition property="build.properties.exists">
			<available file="build.properties" />
		</condition>

		<fail unless="build.properties.exists"
		    message="Couldn't find build.properties file! Make a copy from default.properties and rename it to build.properties. Modify properties, if needed."/>

		<loadproperties srcFile="build.properties"/>

		<fail unless="webapp.home"
		    message="Mandatory webapp.home property is missing in build.properties file. Please provide a directory name as webapp.home property value where the application will be installed eg.  webapp.home=/tomcat/webapps/datadict "/>

		<property name="src" value="src"/>
		<property name="classes.dir" value="${webapp.home}/WEB-INF/classes"/>
		<property name="test.home" value="${app.home}/test"/>
		<property name="test.classes.dir" value="${test.home}/classes"/>

		<!-- define external classpath, i.e. JARs and classes not found in WEB-INF/classes and WEB-INF/lib -->
		<path id="classpath.externals">
			<pathelement location="${servletapi.jar}"/>
			<pathelement location="${lib-mysql-connector-jar}"/>
			<pathelement location="${commons-logging-jar}"/>
		</path>

		<!-- define classpath for compile -->
		<path id="classpath.compile">
			<path refid="classpath.externals"/>
			<fileset dir="public/WEB-INF/lib">
				<include name="*.jar"/>
			</fileset>
		</path>

	</target>

	<target name="compile" depends="init,prepare,clean" description="compiles java classes into classes path">
	    <!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${classes.dir}" debug="on" encoding="UTF-8" deprecation="off" includeAntRuntime="false">
			<classpath refid="classpath.compile"/>
		</javac>
	</target>

	<target name="buildjar" depends="compile" description="creates datadict.jar into WEB-INF/lib">

		<jar jarfile="public/WEB-INF/lib/datadict.jar" includes="**/*.class" basedir="${classes.dir}" />
		<!-- Delete classes directory -->
		<antcall target="clean"/>
	</target>

	<target name="prepare.apphome" description="Creates folder structure for app.home, if not existing yet">
		<mkdir dir="${app.home}"/>
		<mkdir dir="${app.home}/acl"/>
		<mkdir dir="${app.home}/opendoc"/>
		<mkdir dir="${app.home}/opendoc/ods"/>
		<mkdir dir="${app.home}/tmp"/>
	</target>
	<target name="prepare.webapphome" description="Creates folder structure for webapp.home, if not existing yet">
		<mkdir dir="${webapp.home}"/>
		<mkdir dir="${webapp.home}/images"/>
		<mkdir dir="${webapp.home}/META-INF"/>
		<mkdir dir="${webapp.home}/WEB-INF"/>
		<mkdir dir="${webapp.home}/WEB-INF/classes"/>
		<mkdir dir="${webapp.home}/WEB-INF/lib"/>
		<mkdir dir="${webapp.home}/visuals"/>
	</target>
	<target name="prepare">
		<antcall target="prepare.apphome"/>
		<antcall target="prepare.webapphome"/>
	</target>

	<target name="install" depends="init,copyfiles" description="complete installation">
		<antcall target="checkProps"/>
	</target>

	<target name="copyfiles" depends="buildjar" description="Copies all files to deploy dir. Does not overwrite properties files!">

		<copy file="makemdb.sh" todir="${app.home}" overwrite="false">
        		<filterchain>
				<replacetokens>
					<token key="WEBAPP.HOME" value="${webapp.home}"/>
					<token key="APP.HOME" value="${app.home}"/>
					<token key="MYSQL.JAR" value="${lib-mysql-connector-jar}"/>
				</replacetokens>
        		</filterchain>
		</copy>

		<copy file="VERSION.txt" todir="${app.home}" overwrite="true"/>
		<copy todir="${app.home}/acl" overwrite="false">
			<fileset dir="acl"/>
			<!-- <globmapper from="*" to="*.dist"/> -->
		</copy>
		<copy todir="${app.home}/opendoc" overwrite="true">
			<fileset dir="opendoc"/>
		</copy>

		<!--
		To make sure that any removed JSP files, JAR libraries, etc will also be removed from
		the webapp home, clear the latter. BUT exclude the visuals directory, as this contains
		images uploaded by the users!!!
		-->
		<delete includeemptydirs="true" description="Deletes all files and subdirectories of webapp.home, but not the webapp.home itself.">
			<fileset dir="${webapp.home}" excludes="visuals/*"/>
		</delete>

		<copy file="src/arial.ttf" todir="${classes.dir}" overwrite="false"/>
		<mkdir dir="${webapp.home}/visuals"/>

		<copy todir="${webapp.home}" overwrite="true">
			<fileset dir="public">
				<exclude name="**/*.java" />
				<exclude name="**/*.properties" />
				<exclude name="visuals/**" />
			</fileset>
		</copy>
        <copy todir="${webapp.home}" overwrite="true">
            <fileset dir="custom">
                <exclude name="README.txt" />
                <exclude name="**/*.sample" />
            </fileset>
        </copy>
		<copy file="context.xml" todir="${webapp.home}/META-INF" overwrite="true">
        		<filterchain>
				<replacetokens>
					<token key="DB.USER" value="${db.user}"/>
					<token key="DB.PASSWORD" value="${db.password}"/>
					<token key="DB.HOST" value="${db.host}"/>
					<token key="DB.DATABASE" value="${db.database}"/>
				</replacetokens>
        		</filterchain>
		</copy>

        <replace file="${webapp.home}/WEB-INF/web.xml" token="@APP.NAME@" value="${app.name}"/>

       	<condition property="uit.needed">
		    <not>
			<available file="${classes.dir}/uit.properties" />
		    </not>
		</condition>
		<condition property="datadict.needed">
		    <not>
			<available file="${classes.dir}/datadict.properties" />
		    </not>
		</condition>
		<condition property="log4j.needed">
		    <not>
			<available file="${classes.dir}/log4j.properties" />
		    </not>
		</condition>
		<condition property="eionetdir.needed">
		    <not>
			<available file="${classes.dir}/eionetdir.properties" />
		    </not>
		</condition>
		<condition property="teXDBMsg.needed">
		    <not>
			<available file="${classes.dir}/teXDBMsg.properties" />
		    </not>
		</condition>
		<antcall target="copy_props" />
	</target>

	<target name="copy_props" description="Checks that certain properties files exist">
		<antcall target="cp_datadict"/>
		<antcall target="cp_uit"/>
		<antcall target="cp_log4j"/>
		<antcall target="cp_eionetdir"/>
		<antcall target="cp_teXDBMsg"/>
	</target>

	<target name="cp_datadict" if="datadict.needed">

		<!--Create properties file from template -->
		<delete file="${classes.dir}/datadict.properties"/>
		<copy file="${src}/datadict.properties.tmpl"  tofile="${classes.dir}/datadict.properties" >
			<filterchain>
				<striplinecomments>
						<comment value="!"/>
				</striplinecomments>
				<replacetokens>
					<token key="DB.USER" value="${db.user}"/>
					<token key="DB.PASSWORD" value="${db.password}"/>
					<token key="DB.HOST" value="${db.host}"/>
					<token key="DB.DATABASE" value="${db.database}"/>
					<token key="WEBAPP.HOME" value="${webapp.home}"/>
					<token key="APP.HOME" value="${app.home}"/>
					<token key="DD.URL" value="${dd.url}"/>
					<token key="DD.HOST" value="${dd.host}"/>
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="cp_uit" if="uit.needed">

		<!--Create properties file from template -->
		<delete file="${classes.dir}/uit.properties"/>
		<copy file="${src}/uit.properties.tmpl" tofile="${classes.dir}/uit.properties" >
			<filterchain>
				<striplinecomments>
					<comment value="!"/>
				</striplinecomments>
				<replacetokens>
					<token key="DB.USER" value="${db.user}"/>
					<token key="DB.PASSWORD" value="${db.password}"/>
					<token key="DB.HOST" value="${db.host}"/>
					<token key="DB.DATABASE" value="${db.database}"/>
					<token key="WEBAPP.HOME" value="${webapp.home}"/>
					<token key="APP.HOME" value="${app.home}"/>
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="cp_log4j" if="log4j.needed">
		<copy file="${src}/log4j.properties.tmpl" tofile="${classes.dir}/log4j.properties">
			<filterchain>
				<replacetokens>
					<token key="WEBAPP.HOME" value="${webapp.home}"/>
					<token key="APP.HOME" value="${app.home}"/>
				</replacetokens>
			</filterchain>
   		</copy>
	</target>

	<target name="cp_eionetdir" if="eionetdir.needed">
		<copy file="${src}/eionetdir.properties" tofile="${classes.dir}/eionetdir.properties"/>
	</target>

	<target name="cp_teXDBMsg" if="teXDBMsg.needed">
		<copy file="${src}/teXDBMsg.properties" tofile="${classes.dir}/teXDBMsg.properties"/>
	</target>

<!-- Check properties inside properties-files -->
	<target name="checkProps">
		<antcall target="checkUITProps"/>
		<antcall target="checkDataDictProps"/>
	</target>

	<target name="checkUITProps">
		<loadproperties srcFile="${classes.dir}/uit.properties"/>
		<condition property="srvdef.not.available">
			<not>
				<available file="${services.definition.file}"/>
			</not>
		</condition>

		<condition property="groupfile.not.available">
			<not>
				<available file="${application.localgroups.file}"/>
			</not>
		</condition>
		<condition property="prms.not.available">
			<not>
				<available file="${application.permissions.file}"/>
			</not>
		</condition>
		<condition property="users.not.available">
			<not>
				<available file="${acl.localusers.xml}"/>
			</not>
		</condition>

		<antcall target="warn_definition"/>
		<antcall target="warn_localgroup"/>
		<antcall target="warn_prms"/>
		<antcall target="warn_users"/>

	</target>

	<target name="checkDataDictProps">
		<loadproperties srcFile="${classes.dir}/datadict.properties"/>
		<condition property="mdbexecutable.not.available">
			<not>
				<available file="${mdb.executable}"/>
			</not>
		</condition>
		<condition property="pdfunifont.not.available">
			<not>
				<available file="${pdf.uni-font}"/>
			</not>
		</condition>
		<condition property="visualspath.not.available">
			<not>
				<available file="${visuals.path}" type="dir"/>
			</not>
		</condition>
		<condition property="odspath.not.available">
			<not>
				<available file="${opendoc.ods.path}" type="dir"/>
			</not>
		</condition>
		<condition property="tempfilepath.not.available">
			<not>
				<available file="${general.temp-file-path}" type="dir"/>
			</not>
		</condition>
		<condition property="docpath.not.available">
			<not>
				<available file="${general.doc-path}" type="dir"/>
			</not>
		</condition>

		<antcall target="warn_mdbexecutable"/>
		<antcall target="warn_pdfunifont"/>
		<antcall target="warn_visualspath"/>
		<antcall target="warn_odspath"/>
		<antcall target="warn_tempfilepath"/>
		<antcall target="warn_docpath"/>

	</target>

	<!-- Warnings to display if certain paths, files, etc specified in properties-files do not actually exist in the system -->

	<!-- warnings for uit.properties -->

	<target name="warn_definition" if="srvdef.not.available">
		<echo message="==================================================================="/>
		<echo message="Services definition file is not available at: ${services.definition.file}"/>
		<echo message="Please specify the correct location in uit.properties"/>
		<echo message="==================================================================="/>
	</target>

	<target name="warn_localgroup" if="groupfile.not.available">
		<echo message="==================================================================="/>
		<echo message="File for localgroups and users is not available at: ${application.localgroups.file}"/>
		<echo message="Please specify the correct location in uit.properties"/>
		<echo message="==================================================================="/>
	</target>

	<target name="warn_prms" if="prms.not.available">
		<echo message="==================================================================="/>
		<echo message="File for app permissions and descriptions is not available at: ${application.permissions.file}"/>
		<echo message="Please specify the correct location in uit.properties"/>
		<echo message="==================================================================="/>
	</target>

	<target name="warn_users" if="users.not.available">
		<echo message="==================================================================="/>
		<echo message="File for localuser accounts is not available at: ${acl.localusers.xml}"/>
		<echo message="Please specify the correct location in uit.properties"/>
		<echo message="==================================================================="/>
	</target>

	<!-- warnings for datadict.properties -->

	<target name="warn_mdbexecutable" if="mdbexecutable.not.available">
		<echo message="==================================================================="/>
		<echo message="The file specified in mdb.executable is not available at: ${mdb.executable}"/>
		<echo message="Please specify the correct location in datadict.properties"/>
		<echo message="==================================================================="/>
	</target>
	<target name="warn_pdfunifont" if="pdfunifont.not.available">
		<echo message="==================================================================="/>
		<echo message="The file specified in pdf.uni-font is not available at: ${pdf.uni-font}"/>
		<echo message="Please specify the correct location in datadict.properties"/>
		<echo message="==================================================================="/>
	</target>
	<target name="warn_visualspath" if="visualspath.not.available">
		<echo message="==================================================================="/>
		<echo message="The folder specified in visuals.path is not available at: ${visuals.path}"/>
		<echo message="Please specify the correct location in datadict.properties"/>
		<echo message="==================================================================="/>
	</target>
	<target name="warn_odspath" if="odspath.not.available">
		<echo message="==================================================================="/>
		<echo message="The folder specified in opendoc.ods.path is not available at: ${opendoc.ods.path}"/>
		<echo message="Please specify the correct location in datadict.properties"/>
		<echo message="==================================================================="/>
	</target>
	<target name="warn_tempfilepath" if="tempfilepath.not.available">
		<echo message="==================================================================="/>
		<echo message="The folder specified in general.temp-file-path is not available at: ${general.temp-file-path}"/>
		<echo message="Please specify the correct location in datadict.properties"/>
		<echo message="==================================================================="/>
	</target>
	<target name="warn_docpath" if="docpath.not.available">
		<echo message="==================================================================="/>
		<echo message="The folder specified in general.doc-path is not available at: ${general.doc-path}"/>
		<echo message="Please specify the correct location in datadict.properties"/>
		<echo message="==================================================================="/>
	</target>

	<target name="clean">
		<delete dir="${classes.dir}/eionet"/>
	</target>

<!-- ******************************************************************** -->
<!-- ************ TASKS AND TARGETS RELATED TO UNIT-TESTS *************** -->
<!-- ******************************************************************** -->

	<target name="test" depends="init,test.prepare,test.clean,test.compile,test.copyfiles,test.copy_props,test.seed,test.run"/>

	<target name="test.prepare" description="Creates folder structure for test.home, if not existing yet">
		<mkdir dir="${test.home}"/>
		<mkdir dir="${test.home}/acl"/>
		<mkdir dir="${test.home}/opendoc"/>
		<mkdir dir="${test.home}/opendoc/ods"/>
		<mkdir dir="${test.home}/tmp"/>
		<mkdir dir="${test.home}/classes"/>
	</target>

	<target name="test.clean">
		<delete includeemptydirs="true">
			<fileset dir="${test.classes.dir}" includes="**/*"/>
		</delete>
	</target>

	<target name="test.compile">
		<javac srcdir="${src}" destdir="${test.classes.dir}" source="1.5" target="1.5" debug="on" encoding="UTF-8" deprecation="off" includeAntRuntime="false">
			<classpath refid="classpath.compile"/>
		</javac>
		<javac srcdir="test/src" destdir="${test.classes.dir}" source="1.5" target="1.5" debug="on" encoding="UTF-8" deprecation="off" includeAntRuntime="false">
			<classpath>
				<pathelement path="${test.classes.dir}"/>
				<path refid="classpath.compile"/>
				<fileset dir="test/lib">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</javac>
	</target>

	<target name="test.copyfiles" description="Copies resource files to ${test.home}/classes dir.">

		<copy todir="${test.home}/acl" overwrite="false">
			<fileset dir="acl"/>
		</copy>
		<copy todir="${test.home}/opendoc" overwrite="true">
			<fileset dir="opendoc"/>
		</copy>
	</target>

	<target name="test.copy_props">
		<antcall target="copy_props">
			<param name="uit.needed" value="true"/>
			<param name="datadict.needed" value="true"/>
			<param name="log4j.needed" value="true"/>
			<param name="eionetdir.needed" value="true"/>
			<param name="teXDBMsg.needed" value="true"/>

			<param name="classes.dir" value="${test.classes.dir}"/>
			<param name="app.home" value="${test.home}"/>

			<param name="db.host" value="${test.db.host}"/>
			<param name="db.database" value="${test.db.database}"/>
			<param name="db.user" value="${test.db.user}"/>
			<param name="db.password" value="${test.db.password}"/>
		</antcall>
	</target>

	<target name="test.seed">
		<copy todir="${test.classes.dir}" overwrite="true">
			<fileset dir="test/src">
				<include name="**/seed-*.*"/>
			</fileset>
		</copy>
	</target>

	<target name="test.run">
		<junit haltonfailure="yes" failureproperty="unittestFailed" showoutput="yes" printsummary="yes">
			<classpath>
				<pathelement path="${test.classes.dir}"/>
				<path refid="classpath.compile"/>
				<fileset dir="test/lib">
					<include name="*.jar"/>
				</fileset>
			</classpath>
			<formatter type="brief" usefile="false"/>
			<batchtest fork="yes">				
				<fileset dir="test/src">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>
		<fail if="unittestFailed" message="One or more unit tests failed."/>
	</target>

</project>
